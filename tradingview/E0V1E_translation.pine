// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © MasterX1987

//@version=5
//strategy("Freqtrade Strategy Translation", overlay=true, max_lines_count = 500, max_labels_count = 500, max_bars_back = 1)
indicator("Freqtrade Strategy Translation", max_lines_count = 500, max_labels_count = 500, max_bars_back = 1)

tp_sl_entry_transparent = 30
color tp_color = color.new(color.green, tp_sl_entry_transparent)
color entry_color = color.rgb(120, 123, 134, tp_sl_entry_transparent)
color sl_color = color.new(color.red, tp_sl_entry_transparent)
line_style = line.style_dotted

type Trade
	int id = 0
	int timestamp = na
	bool hold = false
	bool hold2 = false
	int start_bar_index = 0
	int count = 0
	string entry_tag
	string exit_tag
	float market_order_comission
	float limit_order_comission
	float entry_price
	float sl_price
	float tp_price
	float min_rate
	float min_profit
	float open_rate
	float break_even_price
	bool entry_hit = false
	bool sl_hit = false
	bool tp_hit = false
	float position_size_left = 100
	float risk_percent
	bool is_closed = false
	bool wait = false
	bool enter = false
	bool exit = false
	float close_price = 0
	bool can_break_even = false
	bool force_closed = false
	float profit = 0
	float current_profit
	float risk_reward
	line entry_line
	line stoploss_line
	line target1_line
	line target2_line
	line target3_line
	line target4_line

var Trade trade = na
var int id = 0
var int first_trade_date = na
var int last_trade_bar_index = 0
var int trade_count = 0
var int profit_trades = 0
var int loss_trades = 0
var float total_profit = 0.0
var float profit = 0.0
var float loss = 0.0
var int mc = 0
var int rc = 0
var int sc = 0
var int mac = 0
var line tp_line = na
var label tp_label = na
var line entry_line = na
var label entry_label = na
var line close_line = na
var label close_label = na
var line sl_line = na
var label sl_label = na
var label lable_at_signal = na
var bool show_profit_panel = true
var label conds_label = na
var label conds_label_2 = na
var string conds_text = na

correlationTrend(Series_1, Period) => // Correlation Trend Function
	period = ta.highest(int(Period), 2)
	Ex = 0.0, Ey = 0.0, Ex2 = 0.0, Ey2 = 0.0, Exy = 0.0
	for i=0 to period-1
		X = nz(Series_1[i])
		Y = -i
		Ex  := Ex  + X
		Ex2 := Ex2 + X * X
		Exy := Exy + X * Y
		Ey2 := Ey2 + Y * Y
		Ey  := Ey  + Y
	denominator = (period * Ex2 - Ex * Ex) * (period * Ey2 - Ey * Ey)
	denominator==0.0 or bar_index==0 ? 0.0 : (period * Exy - Ex * Ey) / math.sqrt(denominator)

RoundUp(number, decimals) =>
	factor = math.pow(10, decimals)
	math.ceil(number * factor) / factor

// Inputs
use_trailing_stop = input.bool(false, title='Use Trailing Stop')
use_stoploss = input.bool(true, title='Use Stoploss')
show_conds = input.bool(false, title='Show Conditions')
show_indi = input.bool(true, title='Show Indicators')
stoploss = input.float(-0.25, title="Stoploss", minval=-1, maxval=0)
trailing_stop = input.float(0.03, title="Traling Stop", minval=0, maxval=1)
stop_duration_candles = input.int(18, title="CooldownPeriod", minval=0)
buy_rsi_fast_32 = input.int(40, title="Buy RSI Fast", minval=20, maxval=70)
buy_rsi_32 = input.int(42, title="Buy RSI", minval=15, maxval=50)
buy_sma15_32 = input.float(0.973, title="Buy SMA Factor", minval=0.9, maxval=1)
buy_cti_32 = input.float(0.69, title="Buy CTI", minval=-1, maxval=1)
//sell_win_profit = input.float(0.01, title="Sell Win Profit", minval=-1, maxval=1)
sell_fastx = input.int(84, title="Sell FastK", minval=50, maxval=100)
//sell_win_cci = input.int(80, title="Sell CCI Win", minval=0, maxval=600)
sell_loss_cci = input.int(120, title="Sell CCI Loss", minval=0, maxval=600)
sell_loss_profit = input.float(-0.05, title="Sell Loss Profit", minval=-1, maxval=1)

// Trailing Stop
//strategy.exit("Trailing Stop", trail_offset = close * 1.03, trail_points=strategy.position_avg_price * 0.03)

// Indicators
rsi_fast = ta.rsi(close, 4)
rsi_slow = ta.rsi(close, 20)
rsi = ta.rsi(close, 14)
sma_15 = ta.sma(close, 15)
sma_9 = ta.wma(close, 20)
sma_15_b = sma_15 * buy_sma15_32
sma_15_a = sma_15 * (2 - buy_sma15_32)
cci = ta.cci(close, 20)
cti  =  correlationTrend(close, 20)
fastk = ta.stoch(close, high, low, 5)
ma20 = ta.ema(close, 20)
ma50 = ta.ema(close, 50)
ma100 = ta.ema(close, 100)
ma120 = ta.ema(close, 120)
ma150 = ta.ema(close, 150)
ma240 = ta.ema(close, 240)
ma_buy = ta.wma(close, 20)
ma_buy_2 = ma_buy * 0.973

// Define a condition for when RSI slow is falling
rsi_slow_condition = ta.change(rsi_slow) < 0

// Buy conditions
buy_condition_1 = (rsi_slow[0] < rsi_slow[1]) and (rsi_fast < buy_rsi_fast_32) and (rsi > buy_rsi_32) and (close < sma_15 * buy_sma15_32) and (cti < buy_cti_32)

buy_condition_new = (rsi_slow[0] < rsi_slow[1]) and (rsi_fast < 34) and (rsi > 28) and (close < sma_15 * 0.96) and (cti < buy_cti_32)

buy_condition = buy_condition_1 // or buy_condition_new

buy_condition_test = (open[1] > sma_15_a[1]) and (close[1] < sma_15_a[1]) and (open < sma_15_a) and (close > sma_15_a) and (sma_15_a > sma_15_a[1])

if not na(trade)
	if trade.start_bar_index == 0
		trade.start_bar_index := bar_index
		trade.open_rate := open
		trade.min_rate := low
		trade.min_profit := (100 / trade.open_rate * trade.min_rate - 100) / 100
		first_trade_date := trade_count == 0 ? timestamp(year, month, dayofmonth, hour, minute) : first_trade_date
		entry_line := line.new(x1=trade.start_bar_index, y1=trade.entry_price, x2=bar_index, y2=trade.entry_price, color=entry_color, style = line.style_solid, width = 2, force_overlay=true)
		if use_stoploss
			sl_line := line.new(x1=trade.start_bar_index, y1=trade.sl_price, x2=bar_index, y2=trade.sl_price, color=sl_color, style = line_style, width = 2, force_overlay=true)
		if use_trailing_stop
			tp_line := line.new(x1=trade.start_bar_index, y1=trade.tp_price, x2=bar_index, y2=trade.tp_price, color=tp_color, style = line_style, width = 2, force_overlay=true)
			lable_at_signal := label.new(bar_index, trade.tp_price * 1.09, "", style = label.style_label_center, textcolor = color.white, force_overlay=true)
		if not use_trailing_stop
			lable_at_signal := label.new(bar_index, trade.entry_price * 1.1, "", style = label.style_label_center, textcolor = color.white, force_overlay=true)


	if low < trade.min_rate and bar_index != trade.start_bar_index
		trade.min_rate := low
		trade.min_profit := (100 / trade.open_rate * trade.min_rate - 100) / 100
	if use_trailing_stop
		if close >= trade.tp_price and not trade.tp_hit
			trade.tp_hit := true
	if use_stoploss
		if close <= trade.sl_price and bar_index != trade.start_bar_index and not trade.sl_hit
			trade.sl_hit := true
	if not trade.is_closed
		if use_trailing_stop
			line.set_xy1(tp_line, trade.start_bar_index, trade.tp_price)
			line.set_xy2(tp_line, bar_index + 1, trade.tp_price)
		line.set_xy1(entry_line, trade.start_bar_index, trade.entry_price)
		line.set_xy2(entry_line, bar_index + 1, trade.entry_price)
		if use_stoploss
			line.set_xy1(sl_line, trade.start_bar_index, trade.sl_price)
			line.set_xy2(sl_line, bar_index + 1, trade.sl_price)
		lable_at_signal.set_x(int(math.avg(trade.start_bar_index, bar_index + 2)))
	else
		if use_trailing_stop
			line.set_xy1(tp_line, trade.start_bar_index, trade.tp_price)
			line.set_xy2(tp_line, bar_index, trade.tp_price)
		line.set_xy1(entry_line, trade.start_bar_index, trade.entry_price)
		line.set_xy2(entry_line, bar_index, trade.entry_price)
		if use_stoploss
			//line.delete(sl_line)
			line.set_xy1(sl_line, trade.start_bar_index, trade.sl_price)
			line.set_xy2(sl_line, bar_index, trade.sl_price)
		lable_at_signal.set_x(int(math.avg(trade.start_bar_index, bar_index)))
	sign = trade.profit >= 0 ? "+" : na
	if trade.exit_tag == ''
		lable_at_signal.set_text(sign + str.tostring(trade.profit, "#.##") + "%, " + str.tostring(total_profit, "#.##") + "%\n" + trade.entry_tag)
	else
		lable_at_signal.set_text(sign + str.tostring(trade.profit, "#.##") + "%, " + str.tostring(total_profit, "#.##") + "%\n" + trade.entry_tag + "\n" + trade.exit_tag)
	lable_at_signal.set_color(trade.profit >= 0 ? color.green : color.red)
	if use_trailing_stop
		if trade.tp_hit
			linefill.new(entry_line, tp_line, color = color.new(color.green, 85))
	if use_stoploss
		if trade.sl_hit
			linefill.new(sl_line, entry_line, color = color.new(color.red, 85))
	if trade.is_closed
		close_line := line.new(x1=trade.start_bar_index, y1=trade.close_price, x2=bar_index, y2=trade.close_price, color=color.white, style = line_style, width = 2, force_overlay=true)
		if trade.profit <= 0
			lable_at_signal.set_xy(int(math.avg(trade.start_bar_index, bar_index)), trade.entry_price * 1.1)
			linefill.new(close_line, entry_line, color = color.new(color.red, 85))
		else
			lable_at_signal.set_xy(int(math.avg(trade.start_bar_index, bar_index)), trade.close_price * 1.1)
			linefill.new(close_line, entry_line, color = color.new(color.green, 85))
		if use_stoploss
			line.delete(sl_line)
		if use_trailing_stop
			line.delete(tp_line)
		trade := na

if na(trade)
	if buy_condition and bar_index >= last_trade_bar_index + stop_duration_candles
		id += 1
		trade := Trade.new()
		trade.id := id
		if buy_condition_1
			trade.entry_tag := 'buy_1'
			//strategy.entry("Buy 1", strategy.long)
		else
			trade.entry_tag := 'buy_new'
			//strategy.entry("Buy New", strategy.long)
		trade.entry_price := close
		trade.entry_hit := true
		trade.timestamp := timestamp(year, month, dayofmonth, hour, minute)
		if use_stoploss
			trade.sl_price := close + close * stoploss
		if use_trailing_stop
			trade.tp_price := close + close * trailing_stop
else
	trade.count += 1
	trade.profit := 100 / trade.entry_price * close - 100
	trade.current_profit := trade.profit / 100
	if close > ma120 and close > ma240
		if not trade.hold
			trade.hold := true
	if (trade.entry_price - ma120) / trade.entry_price >= 0.1
		if not trade.hold2
			trade.hold2 := true
	if trade.current_profit > 0 and fastk > sell_fastx
		trade.exit := true
		trade.exit_tag := 'fastk_profit_sell'
		//strategy.close("FastK Sell")
	if trade.min_profit <= -0.1 and trade.current_profit > sell_loss_profit and cci > sell_loss_cci
		trade.exit := true
		trade.exit_tag := 'cci_loss_sell'
		//strategy.close("CCI Loss Sell")
	if trade.hold2 and close < ma120
		trade.exit := true
		trade.exit_tag := 'ma120_sell_fast'
		//strategy.close("MA120 Sell")
	if trade.hold and close < ma120 and close < ma240 and trade.min_profit <= -0.1
		trade.exit := true
		trade.exit_tag := 'ma120_sell'
	if use_stoploss
		if low <= trade.sl_price
			trade.exit := true
			trade.exit_tag := 'stoploss'
			trade.profit := 100 / trade.entry_price * trade.sl_price - 100
			trade.current_profit := trade.profit / 100
	if use_trailing_stop
		if close >= trade.tp_price
			trade.exit := true
			trade.exit_tag := 'trailing_stop'
			trade.profit := 100 / trade.entry_price * trade.tp_price - 100
			trade.current_profit := trade.profit / 100
	if trade.exit
		trade_count += 1
		if trade.profit > 0
			profit_trades += 1
		else
			loss_trades += 1
		total_profit += trade.profit
		if trade.exit_tag == 'stoploss'
			trade.close_price := trade.sl_price
		else if trade.exit_tag == 'trailing_stop'
			trade.close_price := trade.tp_price
		else
			trade.close_price := close
		trade.is_closed := true
		last_trade_bar_index := bar_index

var table profit_table = na
if show_profit_panel
	profit_table := table.new(position.top_right, 3, 10, border_color = color.green, border_width = 0, force_overlay=true)
	table.cell(profit_table, 0, 0, "═════════════════════════════" + "\n" + "[MASTAAA] FREQ" + "\n" + "═════════════════════════════", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 12, height = 10, text_size = size.normal)
	table.cell(profit_table, 1, 0, "", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 6, height = 3, text_size = size.normal)
	table.merge_cells(profit_table, 0,0,1,0)
	table.cell(profit_table, 0, 1, "First trade:", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 8, height = 3, text_size = size.normal, text_halign = text.align_left)
	table.cell(profit_table, 1, 1, str.format("{0,date,long}", first_trade_date), bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 12, height = 3, text_size = size.normal)
	//table.cell(profit_table, 1, 1, str.tostring(first_trade_date), bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 12, height = 3, text_size = size.normal)
	table.cell(profit_table, 0, 2, "Total trades:", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal, text_halign = text.align_left)
	table.cell(profit_table, 1, 2, str.tostring(trade_count), bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal)
	table.cell(profit_table, 0, 3, "Profit trades:", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal, text_halign = text.align_left)
	table.cell(profit_table, 1, 3, str.tostring(profit_trades), bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal)
	table.cell(profit_table, 0, 4, "Loss trades:", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal, text_halign = text.align_left)
	table.cell(profit_table, 1, 4, str.tostring(loss_trades), bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal)
	table.cell(profit_table, 0, 5, "Winrate:", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal, text_halign = text.align_left)
	table.cell(profit_table, 1, 5, str.tostring(RoundUp(profit_trades / trade_count * 100, 2)) + "%", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal)
	table.cell(profit_table, 0, 9, "═════════════════════════════" + "\n" + "💰 Profit: " + str.tostring(total_profit, "#.##") + "% 💰" + "\n" + "═════════════════════════════", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 10, text_size = size.normal, text_halign = text.align_center, text_valign = text.align_top)
	table.cell(profit_table, 1, 9,"", bgcolor = color.rgb(0, 0, 0, 87), text_color = color.green, width = 5, height = 3, text_size = size.normal)
	table.merge_cells(profit_table, 0, 9, 1, 9)

ma50c = 100 / ma50[1] * ma50[0] - 100
ma100c = 100 / ma100[1] * ma100[0] - 100
ma150c = 100 / ma150[1] * ma150[0] - 100
plot(show_indi ? rsi : na, color=#2195f384, linewidth=3, title='rsi')
plot(show_indi ? rsi_fast : na, color=#4caf4f7d, linewidth=3, title='rsi_fast')
plot(show_indi ? rsi_slow : na, color=#9b27b07b, linewidth=3, title='rsi_slow')
plot(show_indi ? fastk : na, color=#e8dc36, linewidth=3, title='fastk')

//plot(ma120, color=color.new(color.blue, 0), linewidth=3, title='ma120', force_overlay=true)
//plot(ma240, color=color.new(color.green, 0), linewidth=3, title='ma240', force_overlay=true)
plot(sma_15, color=color.new(color.purple, 0), linewidth=3, title='sma_15', force_overlay=true)
plot(sma_15_b, color=#27a9b0, linewidth=3, title='sma_15_b', force_overlay=true)
plot(sma_15_a, color=#3027b0, linewidth=3, title='sma_15_b', force_overlay=true)
plotshape(buy_condition_test, style=shape.xcross, location=location.abovebar, color=#af4c4c, force_overlay=true)
plotshape(buy_condition, style=shape.triangleup, location=location.belowbar, color=color.green, force_overlay=true)
//plotshape(buy_condition, style=shape.triangleup, location=location.absolute, color=color.green)
if show_conds
	conds_text := rsi_slow[0] < rsi_slow[1] ? "+" : " "
	conds_text += rsi_fast < buy_rsi_fast_32 ? "\n+" : "\n"
	conds_text += rsi > buy_rsi_32 ? "\n+" : "\n"
	conds_text += close < sma_15_b ? "\n+" : "\n"
	conds_text += cti < buy_cti_32 ? "\n+" : "\n"
	conds_label := label.new(bar_index, 1, conds_text, style = label.style_none, textcolor = #ffffff)
	conds_label_2 := label.new(bar_index, 1.5, "o", style = label.style_none, textcolor = #ffffff00)
	if barstate.islast
		conds_label_2 := label.new(bar_index + 5, 1, "rsi_slow < rsi_slow[1]" + "\nrsi_fast < 40" + "\nrsi > 42" + "\nclose < sma_15_b" + "\ncti < 0.69", style = label.style_none, textcolor = #ffffff)


//plotshape(data, style=shape.xcross, location = location.absolute)

//plot(ma20, color=color.new(color.orange, 0), linewidth=4, title='ma20', force_overlay=true)
//plot(ma50, color=color.new(color.blue, 0), linewidth=3, title='ma50', force_overlay=true)
//plot(ma100, color=color.new(color.green, 0), linewidth=4, title='ma100', force_overlay=true)
//plot(ma150, color=color.new(color.purple, 0), linewidth=3, title='ma150', force_overlay=true)
